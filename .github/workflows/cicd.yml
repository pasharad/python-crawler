name: CI/CD

on:
  push:
    branches: ["main"]   # هر مرج به main → تریگر

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write    # اجازه push به GHCR
      id-token: write

    env:
      IMAGE_NAME: ghcr.io/${{ github.repository }}:latest
      IMAGE_SHA: ghcr.io/${{ github.repository }}:${{ github.sha }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push (latest + sha)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}
            ${{ env.IMAGE_SHA }}

      - name: Deploy to VPS over SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -e
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}

            # ایجاد دایرکتوری‌های پایدار (بی‌خطر اگر موجود باشند)
            mkdir -p /opt/space-crawler/data /opt/space-crawler/logs

            # ایمیج جدید را بکش
            docker pull ${{ env.IMAGE_NAME }}

            # کانتینر قبلی را متوقف/حذف کن اگر بود
            docker stop space-crawler || true
            docker rm space-crawler || true

            # اجرای کانتینر با پایداری و ولوم‌ها
            docker run -d -p 8000:8000 --name space-crawler --name space-crawler \
              --restart=always \
              -v /opt/space-crawler/data:/app/data \
              -v /opt/space-crawler/logs:/app/logs \
              -e TZ=Asia/Tehran \
              ${{ env.IMAGE_NAME }}

            # پاکسازی ایمیج‌های قدیمی (اختیاری)
            docker image prune -f